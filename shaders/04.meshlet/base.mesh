#version 450
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_NV_mesh_shader: require

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 126) out;

struct Vertex
{
    float16_t x, y, z, w;
    uint8_t nx, ny, nz, nw;
    float16_t tu, uv;
};

layout(binding = 0) readonly buffer Vertices
{
    Vertex vertices[];
};

struct Meshlet
{
    uint vertices[64];
    uint8_t indices[126*3];
    uint8_t triangleCount;
    uint8_t vertexCount;
};

layout(binding = 1) readonly buffer Meshlets
{
    Meshlet meshlets[];
};

layout(location = 0) out vec4 color[];

void main()
{
    uint mi = gl_WorkGroupID.x;
    uint ti = gl_LocalInvocationID.x;

    uint vertexCount = uint(meshlets[mi].vertexCount);
    uint triangleCount = uint(meshlets[mi].triangleCount);
    uint indexCount = triangleCount * 3;

	// TODO: if we have meshlets with 62 or 63 vertices then we pay a small penalty for branch divergence here - we can instead redundantly xform the last vertex
    for (uint i = ti; i < vertexCount; i += 3)
    {
        uint vi = meshlets[mi].vertices[i];

        vec3 position = vec3(vertices[i].x, vertices[i].y, vertices[i].z);
        vec3 normal = vec3(int(vertices[i].nx), int(vertices[i].ny), int(vertices[i].nz)) / 127.0 - 1.0;

        gl_MeshVerticesNV[i].gl_Position = vec4(position*vec3(0.4, 0.4, 0.1) + vec3(0.0, -0.7, 0.5), 1.0);
        color[i] = vec4(normal * 0.5 + vec3(0.5), 1.0);
    }

	for (uint i = ti; i < indexCount; i += 32)
    {
		// TODO: We tried to use writePackedPrimitiveIndices4x8NV, it wasn't giving us better perf
		// We are currently writing one byte from each thread of a warp, which seems like it's bad for perf (bank conflicts etc.) but GPU doesn't seem to care much?
		gl_PrimitiveIndicesNV[i] = uint(meshlets[mi].indices[i]);
    }

	if (ti == 0)
        gl_PrimitiveCountNV = triangleCount;
}
