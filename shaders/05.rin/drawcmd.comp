#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require 

#include "mesh.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform param_block {
    PushConstant constant;
};

layout(binding = 0) readonly buffer MeshDraws {
    MeshDraw mesh_draws[];
};

layout(binding = 1) writeonly buffer MeshDrawCommands {
    MeshDrawCommand commands[];
};
layout(binding = 2) writeonly buffer DrawCommandCount {
	uint draw_command_count;
};

void main() {
	uint ti = gl_LocalInvocationID.x; // SV_GroupThreadID
    uint gi = gl_WorkGroupID.x; // SV_GroupID	
    uint dti = gl_GlobalInvocationID.x; // SV_DispatchThreadID

    uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;

    if (idx == 0)
        atomicExchange(draw_command_count, 0);

    uint index = atomicAdd(draw_command_count, 1);

    commands[index].index_count = mesh_draws[dti].index_count;
    commands[index].instance_count = 1;
    commands[index].first_index = 0;
    commands[index].vertex_offset = 0;
    commands[index].first_instance = dti;
}
