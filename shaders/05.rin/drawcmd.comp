#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require 

#include "mesh.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform param_block {
    CullingData constant;
};

layout(binding = 0) readonly buffer MeshDraws {
    MeshDraw mesh_draws[];
};

layout(binding = 1) writeonly buffer MeshDrawCommands {
    MeshDrawCommand commands[];
};
layout(binding = 2) writeonly buffer DrawCommandCount {
	uint draw_command_count;
};

void main() {
	uint ti = gl_LocalInvocationID.x; // SV_GroupThreadID
    uint gi = gl_WorkGroupID.x; // SV_GroupID	
    uint dti = gl_GlobalInvocationID.x; // SV_DispatchThreadID

    if (dti >= constant.draw_count)
        return;

   MeshDraw draw = mesh_draws[dti];
    vec3 center = draw.scale * draw.center + draw.position;
    float radius = draw.scale * draw.radius;

    bool cull = false;
    cull = cull || (dot(constant.frustum0, vec4(center, 1.0)) <= -radius);
    cull = cull || (dot(constant.frustum1, vec4(center, 1.0)) <= -radius);
    cull = cull || (dot(constant.frustum2, vec4(center, 1.0)) <= -radius);
    cull = cull || (dot(constant.frustum3, vec4(center, 1.0)) <= -radius);
    cull = cull || (dot(constant.frustum4, vec4(center, 1.0)) <= -radius);
    cull = cull || (dot(constant.frustum5, vec4(center, 1.0)) <= -radius);

    if (cull)
        return;

    uint index = atomicAdd(draw_command_count, 1);

    commands[index].index_count = mesh_draws[dti].index_count;
    commands[index].instance_count = 1;
    commands[index].first_index = 0;
    commands[index].vertex_offset = 0;
    commands[index].first_instance = dti;
}
