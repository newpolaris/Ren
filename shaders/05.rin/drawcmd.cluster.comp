#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require 

#include "mesh.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform param_block {
    uint pad;
};

layout(binding = 0) readonly buffer MeshDraws {
    MeshDraw draws[];
};

layout(binding = 1) readonly buffer MeshletDraws {
    Meshlet meshlets[];
};

layout(binding = 2) readonly buffer MeshletIndexs {
	MeshletCall mesh_indices[];
};

layout(binding = 3) readonly buffer DispatchCountBuffer {
	uint dispatch_count_buffer;
};

layout(binding = 4) writeonly buffer MeshDrawCommands {
    MeshDrawCommand commands[];
};

layout(binding = 5) buffer DrawCommandCount {
	uint draw_command_count;
};

void main() {
    uint ti = gl_LocalInvocationID.x; // SV_GroupThreadID
    uint gi = gl_WorkGroupID.x; // SV_GroupID	
    uint dti = gl_GlobalInvocationID.x; // SV_DispatchThreadID

    if (dti >= dispatch_count_buffer*max_meshlet_count) return;

    uint mesh_index = dti / max_meshlet_count;
    uint mesh_id = mesh_indices[mesh_index].mesh_id;

    MeshDraw draw = draws[mesh_id];
    uint mi = dti % max_meshlet_count;
    if (mi >= draw.meshlet_count) return;
    mi = mi + draw.meshlet_offset;

    vec3 center = RotateQuat(meshlets[mi].center, draw.orientation) * draw.scale + draw.position;
    float radius = meshlets[mi].radius * draw.scale;

    vec4 cone = vec4(ivec4(meshlets[mi].cone)) / 127.0;
    vec3 cone_axis = RotateQuat(cone.xyz, draw.orientation);
    float cone_cutoff = cone.w;

    bool cull = ConeCull(center, radius, cone_axis, cone_cutoff, vec3(0, 0, 0));
    if (cull) return;

    uint slot = atomicAdd(draw_command_count, 1);

    commands[slot].indexCount = int(meshlets[mi].triangle_count) * 3;
    commands[slot].instanceCount = 1;
    commands[slot].firstIndex = meshlets[mi].index_offset;
    commands[slot].firstInstance = mesh_id;
    commands[slot].vertexOffset = 0;
}
