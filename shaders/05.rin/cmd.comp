#version 450

#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_GOOGLE_include_directive: require 

#include "mesh.h"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform param_block {
    CullingData constant;
};

layout(binding = 0) readonly buffer MeshDraws {
    MeshDraw draws[];
};

layout(binding = 1) writeonly buffer MeshDrawCommands {
    MeshDrawCommand commands[];
};

layout(binding = 2) buffer DrawCommandCount {
	uint draw_command_count;
};

bool Cull(MeshDraw draw) {
    vec3 center = draw.scale * draw.center + draw.position;
    float radius = draw.scale * draw.radius;

    bool cull = false;
    for (uint i = 0; i < 6; i++) 
        cull = cull || (dot(constant.frustum[i], vec4(center, 1.0)) <= -radius);
    return cull;
}

void main() {
    uint ti = gl_LocalInvocationID.x; // SV_GroupThreadID
    uint gi = gl_WorkGroupID.x; // SV_GroupID	
    uint dti = gl_GlobalInvocationID.x; // SV_DispatchThreadID

    if (dti >= constant.draw_count)
        return;

    MeshDraw draw = draws[dti];
    bool cull = Cull(draw); 
    if (cull) return;

    uint slot = atomicAdd(draw_command_count, 1);

    commands[slot].indexCount = draw.index_count;
    commands[slot].instanceCount = 1;
    commands[slot].firstIndex = draw.index_offset;
    commands[slot].firstInstance = dti;
    commands[slot].vertexOffset = 0;
}
